# Copyright 2020 Google LLC
# Copyright 2021 Nandoâ€™s Chickenland Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
# [START tf-branch]
  - id: 'branch name'
    name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo ********************************************************************************
        echo "${BRANCH_NAME}"
        echo ********************************************************************************
# [END tf-branch]
# [START tf-init]
  - id: 'tf init'
    name: 'hashicorp/terraform:0.14.7'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "$${STACK_PATH}" ]; then
          cd "$${STACK_PATH}"

          PROJECT_ID=$(gcloud config get-value project)
          
          cat > backend.tf <<EOF
          terraform {
            backend "gcs" {
              bucket = "${PROJECT_ID}-${_PROJECT_REGION}-state"
              prefix = "fourkeys"
            }
          }
          EOF
          
          cat > terraform.tfvars <<EOF
          google_artifact_location = "${_GCR_REGION}"
          google_project_id = "${PROJECT_ID}"
          google_project_number = $(gcloud projects list --filter="projectId=${PROJECT_ID}" --format="value(projectNumber)")
          google_region = "${_PROJECT_REGION}"
          version_control_systems = [ ${_VERSION_CONTROL_SYSTEM} ]
          ci_cd_systems = [ ${_CI_CD_SYSTEMS} ]
          git_hub_owner = "${_OWNER}"
          git_hub_repository = "${REPO_NAME}"
          EOF
          
          terraform init
        else
          echo "***************************** SKIPPING INIT ************************************"
          echo "$${STACK_PATH} folder not found in branch '${BRANCH_NAME}'."
          echo "********************************************************************************"
          exit 1
        fi
# [END tf-init]
# [START tf-validate]
  - id: 'tf validate'
    name: 'hashicorp/terraform:0.14.7'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "$${STACK_PATH}" ]; then
          cd "$${STACK_PATH}"
          terraform validate
        else
          echo "***************************** SKIPPING VALIDATE ********************************"
          echo "$${STACK_PATH} folder not found in branch '$BRANCH_NAME'."
          echo "********************************************************************************"
          exit 2
        fi
  # [END tf-validate]
  # [START tf-plan]
  - id: 'tf plan'
    name: 'hashicorp/terraform:0.14.7'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "$${STACK_PATH}" ]; then
          cd "$${STACK_PATH}"
          terraform plan
        else
          echo "***************************** SKIPPING PLAN ************************************"
          echo "$${STACK_PATH} folder not found in branch '${BRANCH_NAME}'."
          echo "********************************************************************************"
          exit 3
        fi
  # [END tf-plan]
  # [START tf-apply]
  - id: 'tf apply'
    name: 'hashicorp/terraform:0.14.7'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "$${STACK_PATH}" ]; then
          if [ "${BRANCH_NAME}" == "${_PROVISION}" ]; then
            cd "$${STACK_PATH}"
            terraform apply -auto-approve
          else
            echo "Skipping as this is not provisioning"
          fi
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "$${STACK_PATH} folder not found in branch '${BRANCH_NAME}'."
          echo "*******************************************************************************"
          exit 4
        fi
    # [END tf-apply]

options:
  env:
    - 'STACK_PATH=experimental/terraform'
substitutions:
  _CI_CD_SYSTEMS: '"cloud-build", "tekton", "gitlab"'
  _GCR_REGION: 'us'
  _OWNER:	'$(push.repository.owner.name)'
  _PROVISION: 'main'
  _VERSION_CONTROL_SYSTEM: '"github", "gitlab"'
  _PROJECT_REGION: 'us-central1'